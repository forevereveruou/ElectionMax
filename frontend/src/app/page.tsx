"use client";

import { useEffect, useMemo, useState } from "react";
import { useFhevm } from "@/fhevm/useFhevm";
import { ethers } from "ethers";
import { useFHEVoteApp } from "@/hooks/useFHEVoteApp";

// Contract info mapping consistent with zama_template (generated by genabi)
function getContractInfoByChainId(chainId: number | undefined): { address?: `0x${string}`; abi: any[] } {
  try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const abiFile = require("@/abi/FHEVoteAppABI");
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const addrFile = require("@/abi/FHEVoteAppAddresses");
    const abi = (abiFile?.FHEVoteAppABI?.abi ?? []) as any[];
    if (!chainId) return { abi };
    const entry = addrFile?.FHEVoteAppAddresses?.[String(chainId)];
    const address = entry?.address as `0x${string}` | undefined;
    return { address, abi };
  } catch {
    return { abi: [] };
  }
}

export default function Page() {
  const [chainId, setChainId] = useState<number | undefined>(undefined);
  const [mounted, setMounted] = useState<boolean>(false);
  const [optionList, setOptionList] = useState<string[]>(["Option A", "Option B"]);
  const [title, setTitle] = useState<string>("Sample Vote");
  const [desc, setDesc] = useState<string>("This is an encrypted voting example");
  const [deadline, setDeadline] = useState<number>(Math.floor(Date.now() / 1000) + 3600);
  const [pollId, setPollId] = useState<string>("1");
  const [optionCount, setOptionCount] = useState<number>(3);
  const [voteIndex, setVoteIndex] = useState<number>(0);
  type PollRow = { id: number; title: string; description: string; options: string[]; deadline: number; creator: string; status: "Active" | "Ended" };
  const [polls, setPolls] = useState<Array<PollRow>>([]);
  const [loadingPolls, setLoadingPolls] = useState<boolean>(false);
  const [selectedOptionByPoll, setSelectedOptionByPoll] = useState<Record<number, number | undefined>>({});
  const [resultsByPoll, setResultsByPoll] = useState<Record<number, bigint[]>>({});
  const [account, setAccount] = useState<string | undefined>(undefined);
  const [connecting, setConnecting] = useState<boolean>(false);
  const [showCreateForm, setShowCreateForm] = useState<boolean>(false);

  const eip1193 = (globalThis as any).ethereum as ethers.Eip1193Provider | undefined;
  const { instance } = useFhevm({ provider: eip1193, enabled: true });

  useEffect(() => {
    (async () => {
      if (!eip1193) return;
      const hex = (await eip1193.request({ method: "eth_chainId" })) as string;
      setChainId(parseInt(hex, 16));
      try {
        const accs = (await eip1193.request({ method: "eth_accounts" })) as string[];
        setAccount(accs?.[0]);
      } catch {}
      if (typeof (eip1193 as any)?.on === "function") {
        (eip1193 as any).on("accountsChanged", (accs: string[]) => setAccount(accs?.[0]));
        (eip1193 as any).on("chainChanged", async () => {
          try {
            const chainHex = (await eip1193.request({ method: "eth_chainId" })) as string;
            setChainId(parseInt(chainHex, 16));
          } catch {}
        });
      }
    })();
  }, [eip1193]);

  const abi = useMemo(() => {
    const info = getContractInfoByChainId(chainId);
    return info.abi;
  }, [chainId]);

  useEffect(() => {
    setMounted(true);
  }, []);

  const { createPoll, vote, decryptResults, requestPublicResultsAccess, deletePoll, isBusy, message } = useFHEVoteApp({
    instance,
    provider: eip1193,
    contractAddress: getContractInfoByChainId(chainId).address,
    abi,
  });

  function pad2(n: number) { return String(n).padStart(2, "0"); }
  function toLocalDateTimeInputValue(seconds: number) {
    const d = new Date(seconds * 1000);
    const y = d.getFullYear();
    const m = pad2(d.getMonth() + 1);
    const day = pad2(d.getDate());
    const hh = pad2(d.getHours());
    const mm = pad2(d.getMinutes());
    const ss = pad2(d.getSeconds());
    return `${y}-${m}-${day}T${hh}:${mm}:${ss}`;
  }
  function parseLocalDateTimeInputValue(value: string) {
    // value format: YYYY-MM-DDTHH:mm[:ss]
    if (!value) return Math.floor(Date.now() / 1000);
    const [datePart, timePart = "00:00:00"] = value.split("T");
    const [yy, mo, dd] = datePart.split("-").map((s) => Number(s));
    const [hh, mi, ss = "0"] = timePart.split(":");
    const local = new Date(yy, mo - 1, dd, Number(hh), Number(mi), Number(ss));
    return Math.floor(local.getTime() / 1000);
  }
  function formatLocalDateTime(seconds: number) {
    return toLocalDateTimeInputValue(seconds).replace("T", " ");
  }
  function shorten(addr: string) { return addr.slice(0, 6) + "..." + addr.slice(-4); }
  
  const handleConnect = async () => {
    if (!eip1193) return;
    setConnecting(true);
    try {
      const accs = (await eip1193.request({ method: "eth_requestAccounts" })) as string[];
      setAccount(accs?.[0]);
      const hex = (await eip1193.request({ method: "eth_chainId" })) as string;
      setChainId(parseInt(hex, 16));
    } finally {
      setConnecting(false);
    }
  };

  const loadPolls = async () => {
    const info = getContractInfoByChainId(chainId);
    if (!info.address || !eip1193) return;
    try {
      setLoadingPolls(true);
      const rp = new ethers.BrowserProvider(eip1193);
      const c = new ethers.Contract(info.address, abi, rp);
      // Compatible across versions: prefer totalPolls(); fallback to raw call pollCount()
      let total: bigint = 0n;
      try {
        if (typeof (c as any).totalPolls === "function") {
          total = await (c as any).totalPolls();
        } else {
          throw new Error("totalPolls not in ABI");
        }
      } catch {
        try {
          const i = new ethers.Interface(["function pollCount() view returns (uint256)"]); 
          const data = i.encodeFunctionData("pollCount", []);
          const raw = await rp.call({ to: info.address, data });
          const [value] = i.decodeFunctionResult("pollCount", raw);
          total = BigInt(value.toString());
        } catch {
          total = 0n;
        }
      }
      const nowSec = Math.floor(Date.now() / 1000);
      const ids = Array.from({ length: Number(total) }, (_, i) => i + 1);
      const rows = await Promise.all(ids.map(async (id): Promise<PollRow | null> => {
        try {
          const r = await c.getPoll(id);
          const creator: string = r[0];
          const title: string = r[1];
          const description: string = r[2];
          const optionsArr: string[] = r[3];
          const deadlineBn: bigint = r[4];
          const deadlineNum = Number(deadlineBn);
          return {
            id,
            title,
            description,
            options: optionsArr,
            deadline: deadlineNum,
            creator,
            status: deadlineNum > nowSec ? ("Active" as const) : ("Ended" as const),
          };
        } catch {
          return null;
        }
      }));
      const list: PollRow[] = rows.filter((x): x is NonNullable<typeof x> => !!x);
      list.sort((a, b) => b.id - a.id);
      setPolls(list);
    } finally {
      setLoadingPolls(false);
    }
  };

  useEffect(() => {
    loadPolls();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [chainId, eip1193]);

  const handleCreate = async () => {
    const ok = await createPoll(title, desc, optionList.map((s) => s.trim()).filter(Boolean), deadline);
    if (ok) {
      await loadPolls();
      setShowCreateForm(false);
    }
  };

  const handleAddOption = () => {
    setOptionList((prev) => (prev.length >= 16 ? prev : [...prev, ""]));
  };

  const handleChangeOption = (index: number, value: string) => {
    setOptionList((prev) => prev.map((v, i) => (i === index ? value : v)));
  };

  const handleSelectOption = (pollIdNum: number, idx: number) => {
    setSelectedOptionByPoll((prev) => ({ ...prev, [pollIdNum]: idx }));
  };

  const handleSubmitVote = async (pollIdNum: number, optionCountNum: number) => {
    const idx = selectedOptionByPoll[pollIdNum];
    if (idx === undefined) return;
    await vote(BigInt(pollIdNum), idx, optionCountNum);
  };

  const handleGrantDecrypt = async (pollIdNum: number) => {
    await requestPublicResultsAccess(BigInt(pollIdNum));
  };

  const handleDecrypt = async (pollIdNum: number, optionCountNum: number) => {
    try {
      const res = await decryptResults(BigInt(pollIdNum), optionCountNum);
      setResultsByPoll((prev) => ({ ...prev, [pollIdNum]: res }));
    } catch (e: any) {
      const msg = (e?.message || e?.toString?.() || "").toLowerCase();
      const unauthorized = msg.includes("not authorized") || msg.includes("is not authorized to user decrypt handle");
      if (!unauthorized) throw e;
      await handleGrantDecrypt(pollIdNum);
      const res2 = await decryptResults(BigInt(pollIdNum), optionCountNum);
      setResultsByPoll((prev) => ({ ...prev, [pollIdNum]: res2 }));
    }
  };

  const handleDelete = async (pollIdNum: number) => {
    const ok = await deletePoll(BigInt(pollIdNum));
    if (ok) await loadPolls();
  };

  // Modern styling with randomized layouts
  const containerStyle: React.CSSProperties = {
    minHeight: '100vh',
    padding: '20px',
    background: 'transparent',
  };

  const headerStyle: React.CSSProperties = {
    textAlign: 'center',
    marginBottom: '40px',
    padding: '30px',
    borderRadius: '25px',
    background: 'rgba(255, 255, 255, 0.1)',
    backdropFilter: 'blur(10px)',
    border: '1px solid rgba(255, 255, 255, 0.2)',
    boxShadow: '0 8px 32px 0 rgba(31, 38, 135, 0.37)',
  };

  const cardStyle: React.CSSProperties = {
    background: 'rgba(255, 255, 255, 0.25)',
    backdropFilter: 'blur(10px)',
    borderRadius: '20px',
    border: '1px solid rgba(255, 255, 255, 0.18)',
    boxShadow: '0 8px 32px 0 rgba(31, 38, 135, 0.37)',
    padding: '30px',
    marginBottom: '30px',
    transition: 'all 0.3s ease',
  };

  const buttonStyle: React.CSSProperties = {
    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
    color: 'white',
    border: 'none',
    borderRadius: '15px',
    padding: '12px 24px',
    fontSize: '16px',
    fontWeight: '600',
    cursor: 'pointer',
    transition: 'all 0.3s ease',
    boxShadow: '0 4px 15px 0 rgba(116, 75, 162, 0.3)',
  };

  const buttonSecondaryStyle: React.CSSProperties = {
    background: 'rgba(255, 255, 255, 0.2)',
    color: '#1a202c',
    border: '1px solid rgba(255, 255, 255, 0.3)',
    borderRadius: '15px',
    padding: '12px 24px',
    fontSize: '16px',
    fontWeight: '500',
    cursor: 'pointer',
    transition: 'all 0.3s ease',
    backdropFilter: 'blur(5px)',
  };

  const inputStyle: React.CSSProperties = {
    background: 'rgba(255, 255, 255, 0.2)',
    border: '1px solid rgba(255, 255, 255, 0.3)',
    borderRadius: '12px',
    padding: '12px 16px',
    fontSize: '16px',
    color: '#1a202c',
    width: '100%',
    backdropFilter: 'blur(5px)',
    transition: 'all 0.3s ease',
  };

  const badgeStyle = (variant: 'active' | 'ended'): React.CSSProperties => ({
    display: 'inline-block',
    padding: '6px 12px',
    borderRadius: '20px',
    fontSize: '12px',
    fontWeight: '600',
    color: variant === 'active' ? '#065f46' : '#92400e',
    background: variant === 'active' 
      ? 'linear-gradient(135deg, #10b981 0%, #059669 100%)' 
      : 'linear-gradient(135deg, #f59e0b 0%, #d97706 100%)',
    boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
  });

  // Randomize layout components (set after mount to avoid SSR/CSR mismatch)
  const [randomLayout, setRandomLayout] = useState<{ gridTemplateColumns: string; gap: string } | null>(null);
  useEffect(() => {
    const layouts = [
      { gridTemplateColumns: '1fr 1fr', gap: '30px' },
      { gridTemplateColumns: '2fr 1fr', gap: '25px' },
      { gridTemplateColumns: '1fr 2fr', gap: '35px' },
      { gridTemplateColumns: '1fr', gap: '20px' },
    ];
    setRandomLayout(layouts[Math.floor(Math.random() * layouts.length)]);
  }, []);

  return (
    <div style={containerStyle}>
      {/* Floating Header */}
      <div className="floating-animation" style={headerStyle}>
        <h1 style={{ 
          fontSize: '3.5rem', 
          fontWeight: '700', 
          margin: '0 0 20px 0',
          background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
          WebkitBackgroundClip: 'text',
          WebkitTextFillColor: 'transparent',
          backgroundClip: 'text',
        }}>
          🗳️ FHEVM Encrypted Voting
        </h1>
        <div style={{ 
          display: 'flex', 
          alignItems: 'center', 
          justifyContent: 'center', 
          gap: '20px', 
          flexWrap: 'wrap',
          fontSize: '16px',
          color: 'rgba(26, 32, 44, 0.8)',
        }}>
          <span>
            Chain: <strong suppressHydrationWarning>{chainId ?? "-"}</strong>
          </span>
          <span>•</span>
          <span>Contract: <strong>{getContractInfoByChainId(chainId).address ?? "Not configured"}</strong></span>
          <span>•</span>
          {!mounted ? (
            <span suppressHydrationWarning>Wallet: -</span>
          ) : eip1193 ? (
            account ? (
              <span>Wallet: <strong>{shorten(account)}</strong></span>
            ) : (
              <button
                style={buttonStyle}
                onClick={handleConnect}
                disabled={connecting}
              >
                {connecting ? "Connecting..." : "Connect Wallet"}
              </button>
            )
          ) : (
            <span>No wallet detected</span>
          )}
        </div>
      </div>

      {/* Message Display */}
      {message && (
        <div className="slide-in" style={{
          marginBottom: '20px',
          padding: '16px 20px',
          borderRadius: '15px',
          background: 'rgba(16, 185, 129, 0.1)',
          border: '1px solid rgba(16, 185, 129, 0.3)',
          color: '#065f46',
          textAlign: 'center',
          fontWeight: '500',
        }}>
          {message}
        </div>
      )}

      {/* Main Content Grid */}
      <div style={{ 
        display: 'grid', 
        ...(randomLayout ?? { gridTemplateColumns: '1fr', gap: '20px' }),
        alignItems: 'start',
      }}>
        
        {/* Create Poll Section */}
        <div className="fade-in" style={cardStyle}>
          <div style={{ 
            display: 'flex', 
            alignItems: 'center', 
            justifyContent: 'space-between', 
            marginBottom: '25px' 
          }}>
            <h2 style={{ 
              margin: 0, 
              fontSize: '1.8rem', 
              fontWeight: '600',
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              backgroundClip: 'text',
            }}>
              ✨ Create New Poll
            </h2>
            <button
              style={buttonSecondaryStyle}
              onClick={() => setShowCreateForm(!showCreateForm)}
            >
              {showCreateForm ? "Hide Form" : "Show Form"}
            </button>
          </div>
          
          {showCreateForm && (
            <div className="slide-in" style={{ display: 'grid', gap: '20px' }}>
              <div>
                <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#1a202c' }}>
                  Poll Title
                </label>
                <input 
                  style={inputStyle} 
                  value={title} 
                  onChange={(e) => setTitle(e.target.value)}
                  placeholder="Enter poll title..."
                />
              </div>
              
              <div>
                <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#1a202c' }}>
                  Description
                </label>
                <input 
                  style={inputStyle} 
                  value={desc} 
                  onChange={(e) => setDesc(e.target.value)}
                  placeholder="Enter poll description..."
                />
              </div>
              
              <div>
                <label style={{ display: 'block', marginBottom: '12px', fontWeight: '600', color: '#1a202c' }}>
                  Options
                </label>
                <div style={{ display: 'grid', gap: '10px' }}>
                  {optionList.map((opt, i) => (
                    <div key={i} style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                      <span style={{ 
                        minWidth: '30px', 
                        height: '30px',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center',
                        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                        color: 'white',
                        borderRadius: '50%',
                        fontSize: '14px',
                        fontWeight: '600',
                      }}>
                        {i + 1}
                      </span>
                      <input 
                        style={inputStyle} 
                        value={opt} 
                        onChange={(e) => handleChangeOption(i, e.target.value)}
                        placeholder={`Option ${i + 1}...`}
                      />
                    </div>
                  ))}
                </div>
                <button 
                  style={{ ...buttonSecondaryStyle, marginTop: '15px' }} 
                  onClick={handleAddOption} 
                  disabled={optionList.length >= 16}
                >
                  + Add Option
                </button>
              </div>
              
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px', alignItems: 'end' }}>
                <div>
                  <label style={{ display: 'block', marginBottom: '8px', fontWeight: '600', color: '#1a202c' }}>
                    Deadline
                  </label>
                  <input 
                    style={inputStyle} 
                    type="datetime-local" 
                    step={1} 
                    value={toLocalDateTimeInputValue(deadline)} 
                    onChange={(e) => setDeadline(parseLocalDateTimeInputValue(e.target.value))} 
                  />
                </div>
                <button
                  style={buttonStyle}
                  disabled={
                    isBusy ||
                    !getContractInfoByChainId(chainId).address ||
                    optionList.map((s) => s.trim()).filter(Boolean).length < 2
                  }
                  onClick={handleCreate}
                >
                  🚀 Create Poll
                </button>
              </div>
            </div>
          )}
        </div>

        {/* All Polls Section */}
        <div className="fade-in" style={cardStyle}>
          <div style={{ 
            display: 'flex', 
            alignItems: 'center', 
            justifyContent: 'space-between', 
            marginBottom: '25px' 
          }}>
            <h2 style={{ 
              margin: 0, 
              fontSize: '1.8rem', 
              fontWeight: '600',
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              backgroundClip: 'text',
            }}>
              📊 All Polls
            </h2>
            <button 
              style={buttonSecondaryStyle} 
              onClick={loadPolls} 
              disabled={loadingPolls}
            >
              {loadingPolls ? "🔄 Refreshing..." : "🔄 Refresh"}
            </button>
          </div>
          
          {!mounted ? (
            <div style={{ color: 'rgba(26, 32, 44, 0.6)', textAlign: 'center', padding: '20px' }}>
              Loading...
            </div>
          ) : (
            <>
              {(!getContractInfoByChainId(chainId).address || !eip1193) && (
                <div style={{ color: 'rgba(26, 32, 44, 0.6)', textAlign: 'center', padding: '20px' }}>
                  Unable to read: Missing contract address or wallet provider
                </div>
              )}
              {polls.length === 0 && (getContractInfoByChainId(chainId).address && eip1193) && (
                <div style={{ color: 'rgba(26, 32, 44, 0.6)', textAlign: 'center', padding: '20px' }}>
                  {loadingPolls ? "Loading..." : "No polls available"}
                </div>
              )}
            </>
          )}
          
          <div style={{ display: 'grid', gap: '20px' }}>
            {polls.map((p, index) => {
              const selectedIdx = selectedOptionByPoll[p.id];
              const canVote = p.status === "Active" && !!instance && !!getContractInfoByChainId(chainId).address && !isBusy;
              const canDecrypt = p.status === "Ended" && !!instance && !!getContractInfoByChainId(chainId).address && !isBusy;
              const canDelete = !!account && account.toLowerCase() === p.creator.toLowerCase() && !!getContractInfoByChainId(chainId).address && !isBusy;
              const res = resultsByPoll[p.id];
              
              // Randomize poll card layout
              const isReversed = index % 3 === 1;
              const hasGradientBorder = index % 2 === 0;
              
              return (
                <div 
                  key={p.id} 
                  className="fade-in"
                  style={{ 
                    ...cardStyle,
                    border: hasGradientBorder 
                      ? '2px solid transparent'
                      : '1px solid rgba(255, 255, 255, 0.18)',
                    background: hasGradientBorder
                      ? 'linear-gradient(rgba(255, 255, 255, 0.25), rgba(255, 255, 255, 0.25)) padding-box, linear-gradient(135deg, #667eea, #764ba2) border-box'
                      : 'rgba(255, 255, 255, 0.25)',
                    transform: isReversed ? 'rotate(0.5deg)' : 'rotate(-0.5deg)',
                    transition: 'all 0.3s ease',
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.transform = 'rotate(0deg) scale(1.02)';
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.transform = isReversed ? 'rotate(0.5deg) scale(1)' : 'rotate(-0.5deg) scale(1)';
                  }}
                >
                  <div style={{ 
                    display: 'flex', 
                    alignItems: 'center', 
                    justifyContent: 'space-between', 
                    marginBottom: '15px' 
                  }}>
                    <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                      <span style={{ 
                        fontSize: '1.2rem', 
                        fontWeight: '700',
                        background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                        WebkitBackgroundClip: 'text',
                        WebkitTextFillColor: 'transparent',
                        backgroundClip: 'text',
                      }}>
                        #{p.id}
                      </span>
                      <span style={badgeStyle(p.status === "Active" ? "active" : "ended")}>
                        {p.status}
                      </span>
                    </div>
                    <div style={{ color: 'rgba(26, 32, 44, 0.6)', fontSize: '14px' }}>
                      Deadline: {formatLocalDateTime(p.deadline)}
                    </div>
                  </div>
                  
                  <div style={{ display: 'grid', gap: '15px' }}>
                    <div>
                      <strong style={{ color: '#1a202c' }}>Title:</strong> {p.title}
                    </div>
                    <div>
                      <strong style={{ color: '#1a202c' }}>Description:</strong> {p.description}
                    </div>
                    <div>
                      <strong style={{ color: '#1a202c' }}>Creator:</strong> {p.creator}
                    </div>
                    
                    <div>
                      <div style={{ fontWeight: '600', marginBottom: '12px', color: '#1a202c' }}>
                        Options
                      </div>
                      <div style={{ display: 'grid', gap: '8px' }}>
                        {p.options.map((opt, i) => (
                          <label 
                            key={i} 
                            style={{ 
                              display: 'flex', 
                              alignItems: 'center', 
                              gap: '12px',
                              padding: '10px',
                              borderRadius: '10px',
                              background: selectedIdx === i 
                                ? 'rgba(102, 126, 234, 0.2)' 
                                : 'rgba(255, 255, 255, 0.1)',
                              cursor: canVote ? 'pointer' : 'default',
                              transition: 'all 0.3s ease',
                            }}
                          >
                            <input
                              type="radio"
                              name={`poll-${p.id}`}
                              checked={selectedIdx === i}
                              onChange={() => handleSelectOption(p.id, i)}
                              disabled={!canVote}
                              style={{ transform: 'scale(1.2)' }}
                            />
                            <span style={{ color: '#1a202c', fontWeight: '500' }}>{opt}</span>
                          </label>
                        ))}
                      </div>
                      
                      <div style={{ 
                        display: 'flex', 
                        gap: '12px', 
                        marginTop: '20px',
                        flexWrap: 'wrap',
                      }}>
                        <button
                          style={buttonStyle}
                          disabled={!canVote || selectedIdx === undefined}
                          onClick={() => handleSubmitVote(p.id, p.options.length)}
                        >
                          🗳️ Submit Vote
                        </button>
                        <button
                          style={buttonSecondaryStyle}
                          disabled={!canDecrypt}
                          onClick={() => handleGrantDecrypt(p.id)}
                        >
                          🔐 Request Decrypt Access
                        </button>
                        <button
                          style={buttonSecondaryStyle}
                          disabled={!canDecrypt}
                          onClick={() => handleDecrypt(p.id, p.options.length)}
                        >
                          📈 View Results
                        </button>
                        {canDelete && (
                          <button
                            style={buttonSecondaryStyle}
                            disabled={!canDelete}
                            onClick={() => {
                              if (confirm(`Delete poll #${p.id}? This action cannot be undone.`)) {
                                handleDelete(p.id);
                              }
                            }}
                          >
                            🗑️ Delete Poll
                          </button>
                        )}
                      </div>
                      
                      {Array.isArray(res) && res.length === p.options.length && (
                        <div style={{ 
                          marginTop: '20px', 
                          padding: '20px',
                          borderRadius: '15px',
                          background: 'rgba(16, 185, 129, 0.1)',
                          border: '1px solid rgba(16, 185, 129, 0.3)',
                        }}>
                          <div style={{ fontWeight: '600', marginBottom: '12px', color: '#065f46' }}>
                            🎉 Decrypted Results
                          </div>
                          <div style={{ display: 'grid', gap: '8px' }}>
                            {res.map((v, i) => (
                              <div key={i} style={{ 
                                display: 'flex', 
                                justifyContent: 'space-between',
                                padding: '8px 12px',
                                borderRadius: '8px',
                                background: 'rgba(255, 255, 255, 0.2)',
                              }}>
                                <span style={{ color: '#065f46' }}>{p.options[i]}</span>
                                <strong style={{ color: '#065f46' }}>{String(v)}</strong>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>
    </div>
  );
}